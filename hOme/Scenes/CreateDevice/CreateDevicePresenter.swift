//
//  CreateDevicePresenter.swift
//  hOme
//
//  Created by Coldefy Yoann on 2016/05/21.
//  Copyright (c) 2016å¹´ YoannColdefy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol CreateDevicePresenterInput {
	func presentConnectors(response: CreateDevice_GetConnectors_Response)
}

protocol CreateDevicePresenterOutput: class {
	func displayConnectors(connectorsInfo: CreateDevice_GetConnectors_ViewModel)
}

class CreateDevicePresenter: CreateDevicePresenterInput {
	weak var output: CreateDevicePresenterOutput!
	
	// MARK: Presentation logic
	
	func presentConnectors(response: CreateDevice_GetConnectors_Response) {
		// NOTE: Format the response from the Interactor and pass the result back to the View Controller
		let connectorTypes = formatConnectorTypes(response.connectorsTypes)
		let connectors = formatConnectors(response.connectorsByType)

		
		let viewModel = CreateDevice_GetConnectors_ViewModel(connectorsTypes: connectorTypes, connectors: connectors)
		output.displayConnectors(viewModel)
	}
	
	private func formatConnectorTypes(connectorsTypes: [ConnectorType]) -> [String] {
		var connectorTypesNames = [String]()
		for connectorType in connectorsTypes {
			switch connectorType {
			case .irKit: connectorTypesNames.append("IRKit")
			}
		}
		return connectorTypesNames
	}
	
	private func formatConnectors(connectorsByType: [ConnectorType: [Connector]]) -> [[String]] {
		var connectorNamesByType = [[String]]()
		for connectorType in connectorsByType.keys {
			var connectorsNames = [String]()
			if let connectorsOfType = connectorsByType[connectorType] {
				for connector in connectorsOfType {
					connectorsNames.append(connector.name)
				}
			}
			connectorNamesByType.append(connectorsNames)
		}
		return connectorNamesByType
	}
}
