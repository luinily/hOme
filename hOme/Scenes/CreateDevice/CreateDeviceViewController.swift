//
//  CreateDeviceViewController.swift
//  hOme
//
//  Created by Coldefy Yoann on 2016/05/21.
//  Copyright (c) 2016å¹´ YoannColdefy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

//MARK: - CreateDeviceViewControllerInput
protocol CreateDeviceViewControllerInput {
	func displayConnectors(connectorsInfo: CreateDevice_GetConnectors_ViewModel)
}

//MARK: - CreateDeviceViewControllerOutput
protocol CreateDeviceViewControllerOutput {
	func prepareConnectorInformation()
//	func doSomething(request: CreateDeviceRequest)
}

//MARK: - UITableViewDelegate
extension CreateDeviceViewController {
	override func tableView(tableView: UITableView, didSelectRowAtIndexPath indexPath: NSIndexPath) {
		if indexPath == _nameCellPath {
			nameTextField.becomeFirstResponder()
		} else if indexPath == _connectorCellPath {
//			output.prepareConnectorInformation()
			connectorTextField.becomeFirstResponder()
		}
	}
}

extension CreateDeviceViewController: UIPickerViewDataSource, UIPickerViewDelegate {
	func numberOfComponentsInPickerView(pickerView: UIPickerView) -> Int {
		return 2
	}
 
	func pickerView(pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
		switch component {
		case 0: return _connectorsTypes.count
		case 1: return _connectors[_currentConnectorTypeRow].count
		default: return 0
		}
	}
 
	func pickerView(pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
		switch component {
		case 0: return _connectorsTypes[row]
		case 1: return _connectors[_currentConnectorTypeRow][row].name
		default: return "Error"
		}
	}
 
	func pickerView(pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int) {
		switch component {
		case 0:
			_currentConnectorTypeRow = row
		case 1:
			connectorTextField.text = _connectors[_currentConnectorTypeRow][row].name
		default:
			return
		}
	}
}

extension CreateDeviceViewController: CreateDeviceViewControllerInput {
	func displayConnectors(connectorsInfo: CreateDevice_GetConnectors_ViewModel) {
		// NOTE: Display the result from the Presenter
		_connectorsTypes = connectorsInfo.connectorsTypes
		_connectors = connectorsInfo.connectors
		//		connectorPicker.reloadAllComponents()
	}
}

//MARK:- CreateDeviceViewController
class CreateDeviceViewController: UITableViewController {
	var output: CreateDeviceViewControllerOutput!
	var router: CreateDeviceRouter!
	@IBOutlet weak var connectorPicker: UIPickerView!
	@IBOutlet weak var nameTextField: UITextField!
	@IBOutlet weak var connectorTextField: UITextField!
	
	private let _nameCellPath = NSIndexPath(forRow: 0, inSection: 0)
	private let _connectorCellPath = NSIndexPath(forRow: 1, inSection: 0)
	private var _connectorsTypes = [String]()
	private var _connectors: [[CreateDevice_GetConnectors_ViewModel.connectorName]] = []
	
	private var _currentConnectorTypeRow: Int = 0
	
	// MARK: Object lifecycle
	
	override func awakeFromNib() {
		super.awakeFromNib()
		CreateDeviceConfigurator.sharedInstance.configure(self)
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad() {
		super.viewDidLoad()
		connectorPicker.dataSource = self
		connectorPicker.delegate = self
		configureConnectorPickerOnLoad()
	}
	
	private func configurePicker() {
		connectorTextField.inputView = connectorPicker
	}
	
	// MARK: Event handling
	
	func configureConnectorPickerOnLoad() {
		// NOTE: Ask the Interactor to do some work
		
		output.prepareConnectorInformation()
		configurePicker()
	}
	
	// MARK: Display logic
	
	
}
