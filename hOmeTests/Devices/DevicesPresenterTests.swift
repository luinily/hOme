//
//  DevicesPresenterTests.swift
//  hOme
//
//  Created by Coldefy Yoann on 2016/05/29.
//  Copyright (c) 2016å¹´ YoannColdefy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import hOme
import XCTest
import CloudKit

class DevicesPresenterTests: XCTestCase {
	// MARK: Subject under test
	
	var sut: DevicesPresenter!
	
	// MARK: Test lifecycle
	
	override func setUp() {
		super.setUp()
		setupDevicesPresenter()
	}
	
	override func tearDown() {
		super.tearDown()
	}
	
	// MARK: Test setup
	
	func setupDevicesPresenter() {
		sut = DevicesPresenter()
	}
	
	// MARK: Test doubles
	
	class DevicesPresenterOutputSpy: DevicesPresenterOutput {
		var displayFetchedDevicesCalled = false
		var viewModel: Devices_FetchDevices_ViewModel?
		
		func displayFetchedDevices(viewModel: Devices_FetchDevices_ViewModel) {
			displayFetchedDevicesCalled = true
			self.viewModel = viewModel
		}
	}
	
	// MARK: Tests
	
	func testPresentFetchDevicesShouldCallOutputDisplayFetchedDevices() {
		// Given
		let spy = DevicesPresenterOutputSpy()
		sut.output = spy
		let response = Devices_FetchedDevices_Response(devices: [])
		
		// When
		
		sut.presentFetchedDevices(response)
		
		// Then
		XCTAssertTrue(spy.displayFetchedDevicesCalled)
	}
	
	func testPresentFetchDevicesShouldFormatDevices() {
		// Given
		let spy = DevicesPresenterOutputSpy()
		sut.output = spy
		let name = Name(name: "deviceName", internalName: "internalDeviceName")
		let deviceInfo = DeviceInfo(name: name, communicatorInternalName: "Communicator", offCommandInternalName: "off", onCommandInternalName: "on")
		let response = Devices_FetchedDevices_Response(devices: [deviceInfo])
		
		// When
		
		sut.presentFetchedDevices(response)
		
		// Then
		if let viewModel = spy.viewModel {
			if let viewModel = viewModel.displayedDevices.first {
				XCTAssertEqual(viewModel.name, "deviceName")
			} else {
				XCTAssert(false, "the model should have one device")
			}
		} else {
			XCTAssert(false, "presentFetchDevices should output a view model")
		}
	}
}
