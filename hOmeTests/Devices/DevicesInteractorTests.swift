//
//  DevicesInteractorTests.swift
//  hOme
//
//  Created by Coldefy Yoann on 2016/05/29.
//  Copyright (c) 2016å¹´ YoannColdefy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import XCTest
@testable import hOme

class DevicesInteractorTests: XCTestCase {
	// MARK: Subject under test
	
	var sut: DevicesInteractor!
	
	// MARK: Test lifecycle
	
	override func setUp() {
		super.setUp()
		setupDevicesInteractor()
	}
	
	override func tearDown() {
		super.tearDown()
	}
	
	// MARK: Test setup
	
	func setupDevicesInteractor() {
		sut = DevicesInteractor()
	}
	

	// MARK: Test doubles
	
	class DevicesInteractorOutputSpy: DevicesInteractorOutput {
		var presentFetchedDevicesCalled = false
		
		func presentFetchedDevices(response: Devices_FetchedDevices_Response) {
			presentFetchedDevicesCalled = true
		}
	}
	
	class DevicesWorkerSpy: DevicesWorker {
		var fetchDevicesCalled = false
		
		override func fetchDevices(completionHandler: (devices: [DeviceProtocol]) -> Void) {
			fetchDevicesCalled = true
			completionHandler(devices: [])
		}
	}
	
	class DeviceStoreSpy: DeviceStore {
		var fetchedDevicesCalled = false
		
		func fetchDevices(completionHandler: (devices: [DeviceProtocol]) -> Void) {
			fetchedDevicesCalled = true
			let oneSecond = dispatch_time(dispatch_time_t(DISPATCH_TIME_NOW), 1 * Int64(NSEC_PER_SEC))
			dispatch_after(oneSecond, dispatch_get_main_queue()) {
				completionHandler(devices: [])
			}
		}
	}
	
	// MARK: Tests
	
	func testFetchDevicesShouldCallOutputPresentFetchedDevices() {
		// Given
		let spy = DevicesInteractorOutputSpy()
		sut.output = spy
		let worker = DevicesWorkerSpy(deviceStore: DeviceStoreSpy())
		sut.worker = worker
		
		let request = Devices_FetchDevices_Request()
		
		// When
		sut.fetchDevices(request)
		
		// Then
		XCTAssertTrue(spy.presentFetchedDevicesCalled)
	}
	
	func testFetchDevicesShouldCallWorkerFetchedDevices() {
		// Given
		let spy = DevicesInteractorOutputSpy()
		sut.output = spy
		let worker = DevicesWorkerSpy(deviceStore: DeviceStoreSpy())
		sut.worker = worker
		
		let request = Devices_FetchDevices_Request()
		
		// When
		sut.fetchDevices(request)
		
		// Then
		XCTAssertTrue(worker.fetchDevicesCalled)
	
	}
}
