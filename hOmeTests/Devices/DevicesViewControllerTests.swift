//
//  DevicesViewControllerTests.swift
//  hOme
//
//  Created by Coldefy Yoann on 2016/05/29.
//  Copyright (c) 2016å¹´ YoannColdefy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import XCTest
@testable import hOme

extension UIViewController {
	//this is here to allow the view to be loaded and testable
	func preloadView() {
		let _ = view
	}
}

class DevicesViewControllerTests: XCTestCase {
	// MARK: Subject under test
	
	var sut: DevicesViewController?
	var window: UIWindow!
}

// MARK: Test lifecycle
extension DevicesViewControllerTests {
	override func setUp() {
		super.setUp()
		window = UIWindow()
		setupDevicesViewController()
	}
	
	override func tearDown() {
		window = nil
		super.tearDown()
	}
}

// MARK: Test setup
extension DevicesViewControllerTests {
	func setupDevicesViewController() {
		let bundle = Bundle.main()
		let storyboard = UIStoryboard(name: "Main", bundle: bundle)
		sut = storyboard.instantiateViewController(withIdentifier: "DevicesViewController") as? DevicesViewController
	}
	
	func loadView() {
		if let viewController = sut {
			window.addSubview(viewController.view)
			viewController.preloadView()
		}
	}
}

// MARK: Test doubles
extension DevicesViewControllerTests {
	class DevicesViewControllerOutputSpy: DevicesViewControllerOutput {
		var fetchDevicesCalled = false
		func fetchDevices(_ request: Devices_FetchDevices_Request) {
			fetchDevicesCalled = true
		}
	}
	
	class DevicesTableSpy: UITableView {
		var reloadDataCalled = false
		override func reloadData() {
			super.reloadData()
			reloadDataCalled = true
		}
	}
}

// MARK: Tests
extension DevicesViewControllerTests {
	func testShouldFetchDevicesWhenViewIsLoaded() {
		if let viewController = sut {
			// Given
			let devicesViewControllerOutputSpy = DevicesViewControllerOutputSpy()
			viewController.output = devicesViewControllerOutputSpy
			
			// When
			loadView()
			
			// Then
			XCTAssertTrue(devicesViewControllerOutputSpy.fetchDevicesCalled, "devices should be fetched")
		}
	}

	//TODO: Repair test to work with threads
	func _testShouldDisplayFetchedDevices() {
		if let viewController = sut {
			// Given
			let spy = DevicesTableSpy()
			viewController.tableView = spy
			var displayDevices: [Devices_FetchDevices_ViewModel.DisplayDevice] = []
			displayDevices.append(Devices_FetchDevices_ViewModel.DisplayDevice(internalName: "iDevice1", name: "Device1"))
			displayDevices.append(Devices_FetchDevices_ViewModel.DisplayDevice(internalName: "iDevice2", name: "Device2"))
			let viewModel = Devices_FetchDevices_ViewModel(displayedDevices: displayDevices)
			// When
			viewController.displayFetchedDevices(viewModel)
			// Then
			XCTAssertTrue(spy.reloadDataCalled, "table reloadData() should be called")
		}
	}
	
	func testNumberOfSectionsInTableShouldAlwaysBeTwo() {
		// Given
		if let tableView = sut?.tableView {
			
			// When
			let numberOfSections = sut?.numberOfSections(in: tableView)
			
			// Then
			XCTAssertEqual(numberOfSections, 2)
		}
	}
	
	func testNumberOfRowsInFirstSection_shouldBeTwo() {
		if let viewController = sut {
			// Given
			guard let tableView = viewController.tableView else {
				XCTAssert(false, "No table view")
				return
			}
			var displayDevices: [Devices_FetchDevices_ViewModel.DisplayDevice] = []
			displayDevices.append(Devices_FetchDevices_ViewModel.DisplayDevice(internalName: "iDevice1", name: "Device1"))
			displayDevices.append(Devices_FetchDevices_ViewModel.DisplayDevice(internalName: "iDevice2", name: "Device2"))
			let viewModel = Devices_FetchDevices_ViewModel(displayedDevices: displayDevices)
			
			// When
			viewController.displayFetchedDevices(viewModel)
			let numberOfRows = viewController.tableView(tableView, numberOfRowsInSection: 0)
		
			// Then
			XCTAssertEqual(numberOfRows, 2)
		}
	}
	
	
	func testNumberOfRowsIn2ndSectionShouldAlwaysBeOne() {
		if let viewController = sut {
			// Arrange
			guard let tableView = viewController.tableView else {
				XCTAssert(false, "No table view")
				return
			}
			var displayDevices: [Devices_FetchDevices_ViewModel.DisplayDevice] = []
			displayDevices.append(Devices_FetchDevices_ViewModel.DisplayDevice(internalName: "iDevice1", name: "Device1"))
			displayDevices.append(Devices_FetchDevices_ViewModel.DisplayDevice(internalName: "iDevice2", name: "Device2"))
			let viewModel = Devices_FetchDevices_ViewModel(displayedDevices: displayDevices)
			
			// Act
			viewController.displayFetchedDevices(viewModel)
			let numberOfRows = viewController.tableView(tableView, numberOfRowsInSection: 1)
			
			// Assert
			XCTAssertEqual(numberOfRows, 1)
		}
	}
	
	//TODO: Repair test to work with threads
	func _testDeviceCellShouldBeConfigured() {
		if let viewController = sut {
			// Arrange
			guard let tableView = viewController.tableView else {
				XCTAssert(false, "No table view")
				return
			}
			let spy = DevicesTableSpy()
			viewController.tableView = spy
			
			var displayDevices: [Devices_FetchDevices_ViewModel.DisplayDevice] = []
			displayDevices.append(Devices_FetchDevices_ViewModel.DisplayDevice(internalName: "iDevice1", name: "Device1"))
			displayDevices.append(Devices_FetchDevices_ViewModel.DisplayDevice(internalName: "iDevice2", name: "Device2"))
			let viewModel = Devices_FetchDevices_ViewModel(displayedDevices: displayDevices)
			
			// Act
			viewController.displayFetchedDevices(viewModel)
			let indexPath = IndexPath(row: 0, section: 0)
			let cell = tableView.cellForRow(at: indexPath)

			// Assert
			XCTAssertEqual(cell?.textLabel?.text, "Device1")
		}
	}
	
	//TODO: Repair test to work with threads
	func _testNewDeviceCellShouldBeConfigured() {
		if let viewController = sut {
			// Arrange
			guard let tableView = viewController.tableView else {
				XCTAssert(false, "No table view")
				return
			}
			var displayDevices: [Devices_FetchDevices_ViewModel.DisplayDevice] = []
			displayDevices.append(Devices_FetchDevices_ViewModel.DisplayDevice(internalName: "iDevice1", name: "Device1"))
			displayDevices.append(Devices_FetchDevices_ViewModel.DisplayDevice(internalName: "iDevice2", name: "Device2"))
			let viewModel = Devices_FetchDevices_ViewModel(displayedDevices: displayDevices)
			
			// Act
			viewController.displayFetchedDevices(viewModel)
			let indexPath = IndexPath(row: 0, section: 1)
			let cell = tableView.cellForRow(at: indexPath)
			
			// Assert
			XCTAssertEqual(cell?.textLabel?.text, "Create New Device...")
		}
	}
	
}
