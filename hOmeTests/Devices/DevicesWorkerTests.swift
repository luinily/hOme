//
//  DevicesWorkerTests.swift
//  hOme
//
//  Created by Coldefy Yoann on 2016/05/29.
//  Copyright (c) 2016å¹´ YoannColdefy. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

@testable import hOme
import XCTest

class DevicesWorkerTests: XCTestCase {
	// MARK: Subject under test
	var sut: DevicesWorker!
}

// MARK: Test lifecycle
extension DevicesWorkerTests {
	override func setUp() {
		super.setUp()
		setupDevicesWorker()
	}
	
	override func tearDown() {
		super.tearDown()
	}
	
	
}

// MARK: Test setup
extension DevicesWorkerTests {
	func setupDevicesWorker() {
		sut = DevicesWorker(deviceStore: DeviceStoreSpy())
	}
}

// MARK: Test doubles
extension DevicesWorkerTests {
	class DeviceStoreSpy: DeviceStore {
		var fetchedDevicesCalled = false
		
		func fetchDevices(completionHandler: (devices: [DeviceInfo]) -> Void) {
			fetchedDevicesCalled = true
			let oneSecond = DispatchTime.now() + Double(1 * Int64(NSEC_PER_SEC)) / Double(NSEC_PER_SEC)
			DispatchQueue.main.asyncAfter(deadline: oneSecond) {
				completionHandler(devices: [])
			}
		}
		
		func createDevice(name: String, connectorInternalName: String, completionHandler: (couldCreateDevice: Bool) -> Void) {
			
		}
		
		func deleteDevice(internalName: String, completionHandler: (couldDeleteDevice: Bool) -> Void) {
		
		}
	}
}

// MARK: Tests
extension DevicesWorkerTests {
	func testFetchDevicesShouldCallStoreFetchDevices() {
		// Given
		if let spy = sut.deviceStore as? DeviceStoreSpy {
			// When
			let expectation = self.expectation(description: "calling fetchDevices should ask the store for the devices")
			sut.fetchDevices() {
				_ in
				expectation.fulfill()
			}
			// Then
			XCTAssertTrue(spy.fetchedDevicesCalled)
			waitForExpectations(timeout: 1.1) {
				(error: Error?) -> Void in
				XCTAssert(true, "Calling fetchDevices() should result in the completion handler being called with the fetched devices results")
			}
		}
		
	}
}
